(library (lunula server)
  (export start)
  (import (rnrs)
          (only (core) collect-notify display-thread-status usleep)
          (only (srfi :8) receive)
          (only (ypsilon concurrent) make-uuid spawn-heap-limit spawn* timeout-object?)
          (only (ypsilon socket) make-server-socket socket-accept socket-close socket-recv)
          (only (lunula controller) default-handler send-html send-response)
          (prefix (lunula log) log:)
          (only (lunula mod_lisp) get-header premature-end-of-header?)
          (only (lunula path) api-path? api-component-procedure api-component-template consume-temporary-path! entry-path?)
          (only (lunula pipeline) request-put! response-get!)
          (only (lunula request) content-length-of method-of parameter-of path-of)
          (only (lunula session) logged-in? session-uuid)
          (only (lunula template) load-templates))

  (define *header-buffer-size* (* 32 1024))

  (define-condition-type &too-big-header &condition
    make-too-big-header too-big-header?)

  (define (receive-header client)
    (let ((data (socket-recv client *header-buffer-size* 0)))
      (let lp ((data data)
               (dlen (bytevector-length data)))
        (guard (con
                ((premature-end-of-header? con)
                 (cond ((< dlen *header-buffer-size*)
                        (let ((next (socket-recv client (- *header-buffer-size* dlen) 0)))
                          (cond ((eof-object? next)
                                 (usleep 500000)
                                 (lp data dlen))
                                (else
                                 (let* ((nlen (bytevector-length next))
                                        (dlen+nlen (+ dlen nlen))
                                        (bv (make-bytevector dlen+nlen)))
                                   (bytevector-copy! data 0 bv 0 dlen)
                                   (bytevector-copy! next 0 bv dlen nlen)
                                   (lp bv dlen+nlen))))))
                       (else
                        (raise (condition
                                (make-too-big-header)
                                (make-irritants-condition data)))))))
          (call-with-port (open-bytevector-input-port data)
            (lambda (port)
              (let ((header (get-header port)))
                (values header (get-bytevector-all port)))))))))

  (define (utf8-list->string utf8-list length)
    (let* ((bv (make-bytevector length))
           (len (fold-left (lambda (n x)
                             (let ((len (bytevector-length x)))
                               (bytevector-copy! x 0 bv n len)
                               (+ n len)))
                           0
                           utf8-list)))
      (assert (= len length))
      (utf8->string bv)))

  (define (receive-content client prefix content-length)
    (define (lp leadings rest-length)
      (let* ((rest (socket-recv client rest-length 0))
             (len (bytevector-length rest)))
        (cond ((= len rest-length)
               (utf8-list->string (reverse (cons rest leadings)) content-length))
              (else
               (assert (< len rest-length))
               (lp (cons rest leadings) (- rest-length len))))))
    (cond ((< 0 content-length)
           (cond ((eof-object? prefix)
                  (lp '() content-length))
                 (else
                  (let ((len (bytevector-length prefix)))
                    (cond ((= content-length len)
                           (utf8->string prefix))
                          (else
                           (assert (< len content-length))
                           (lp (list prefix) (- content-length len))))))))
          (else "")))

  (define (start port)
    (collect-notify #t)
    (spawn-heap-limit (* 6 1024 1024))
    (load-templates #t)
    (let ((socket (make-server-socket port)))
      (let lp ((client (socket-accept socket)))
        (define (clean-up x)
          (log:info "lunula> ~a" x)
          (socket-close client))
        (load-templates #f)
        (receive (header rest)
            (receive-header client)
          (log:info "lunula> header: ~s" header)
          (let* ((method (method-of header))
                 (content (cond ((string-ci=? "POST" method)
                                 (let* ((content-length (content-length-of header))
                                        (content (receive-content client rest content-length)))
                                   (log:info "lunula> content: ~s" content)
                                   content))
                                (else #f))))
            ;;
            (display-thread-status)
            ;;
            (let ((path (path-of header)))
              (cond ((entry-path? path)
                     => (lambda (proc)
                          (let ((uuid (make-uuid)))
                            (spawn* (lambda ()
                                      (guard (con
                                              ((message-condition? con)
                                               (log:info "lunula> ~a" (condition-message con))
                                               con)
                                              ((timeout-object? con)
                                               con))
                                        (proc uuid header content)))
                                    (lambda (x) (log:info "lunula> ~a" x)))
                            (spawn* (lambda ()
                                      (let ((response (response-get! uuid)))
                                        (log:info "lunula> response: ~s" response)
                                        (send-response client header response)))
                                    clean-up))))
                    ((api-path? path)
                     => (lambda (pair)
                          (spawn* (lambda ()
                                    (let ((component (car pair)))
                                      (cond ((guard (con
                                                     ((assertion-violation? con)
                                                      #f))
                                               (apply (api-component-procedure component) (cdr pair)))
                                             => (lambda (body)
                                                  (send-html client
                                                             header
                                                             (api-component-template component)
                                                             (cond ((logged-in? (parameter-of header)) => session-uuid)
                                                                   (else #f))
                                                             body)))
                                            (else (default-handler header client)))))
                                  clean-up)))
                    ((consume-temporary-path! path)
                     (spawn* (lambda ()
                               (request-put! path (list header content))
                               (let ((response (response-get! path)))
                                 (log:info "lunula> response: ~s" response)
                                 (send-response client header response)))
                             clean-up))
                    (else
                     (spawn* (lambda () (default-handler client header))
                             clean-up))))))
        (lp (socket-accept socket)))))

)
